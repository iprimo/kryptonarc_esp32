////// .        // https://github.com/palmmaximilian/ReactNativeArduinoBLE
////// .        // https://github.com/palmmaximilian/ReactNativeArduinoBLE
////// .        
////// .        #include <Arduino.h>
////// .        #include <BLEDevice.h>
////// .        #include <BLEServer.h>
////// .        #include <BLEUtils.h>
////// .        #include "modules/hardware_uuid.hpp"
////// .        #include "modules/e2prom_read_write.h"
////// .        
////// .        // BLE SECTION
////// .        BLEServer *pServer = NULL;
////// .        
////// .        BLECharacteristic *message_characteristic = NULL;
////// .        BLECharacteristic *box_characteristic = NULL;
////// .        
////// .        String boxValue = "0";
////// .        // See the following for generating UUIDs:
////// .        // https://www.uuidgenerator.net/
////// .        
////// .        #define SERVICE_UUID "5e6df2dd-e7c5-4ce3-aa8d-6c7a5871fc51"
////// .        
////// .        #define MESSAGE_CHARACTERISTIC_UUID "6ec0962b-fd7c-4a91-9d21-bdf4c1266136"
////// .        #define BOX_CHARACTERISTIC_UUID "e3badad0-ebba-4059-9b2e-b8a959d95781"
////// .        
////// .        class MyServerCallbacks : public BLEServerCallbacks
////// .        {
////// .            void onConnect(BLEServer *pServer)
////// .            {
////// .                Serial.println("Connected");
////// .            };
////// .        
////// .            void onDisconnect(BLEServer *pServer)
////// .            {
////// .                Serial.println("Disconnected");
////// .            }
////// .        };
////// .        
////// .        class CharacteristicsCallbacks : public BLECharacteristicCallbacks
////// .        {
////// .            void onWrite(BLECharacteristic *pCharacteristic)
////// .            {
////// .                Serial.print("Value Written ");
////// .                Serial.println(pCharacteristic->getValue().c_str());
////// .        
////// .                if (pCharacteristic == box_characteristic)
////// .                {
////// .                    boxValue = pCharacteristic->getValue().c_str();
////// .                    box_characteristic->setValue(const_cast<char *>(boxValue.c_str()));
////// .                    box_characteristic->notify();
////// .                }
////// .            }
////// .        };
////// .        
////// .        void setup()
////// .        {
////// .          
////// .            Serial.begin(115200);
////// .            Serial.println("Test___000001");
////// .            // Create the BLE Device
////// .            BLEDevice::init("BLEExample");
////// .            // Create the BLE Server
////// .            pServer = BLEDevice::createServer();
////// .            pServer->setCallbacks(new MyServerCallbacks());
////// .            // Create the BLE Service
////// .            BLEService *pService = pServer->createService(SERVICE_UUID);
////// .            delay(100);
////// .        
////// .            // Create a BLE Characteristic
////// .            message_characteristic = pService->createCharacteristic(
////// .                MESSAGE_CHARACTERISTIC_UUID,
////// .                BLECharacteristic::PROPERTY_READ |
////// .                    BLECharacteristic::PROPERTY_WRITE |
////// .                    BLECharacteristic::PROPERTY_NOTIFY |
////// .                    BLECharacteristic::PROPERTY_INDICATE);
////// .        
////// .            box_characteristic = pService->createCharacteristic(
////// .                BOX_CHARACTERISTIC_UUID,
////// .                BLECharacteristic::PROPERTY_READ |
////// .                    BLECharacteristic::PROPERTY_WRITE |
////// .                    BLECharacteristic::PROPERTY_NOTIFY |
////// .                    BLECharacteristic::PROPERTY_INDICATE);
////// .        
////// .            // Start the BLE service
////// .            pService->start();
////// .        
////// .            // Start advertising
////// .            pServer->getAdvertising()->start();
////// .        
////// .            message_characteristic->setValue("Message one");
////// .            message_characteristic->setCallbacks(new CharacteristicsCallbacks());
////// .        
////// .            box_characteristic->setValue("0");
////// .            box_characteristic->setCallbacks(new CharacteristicsCallbacks());
////// .        
////// .            Serial.println("Waiting for a client connection to notify...");
////// .            Serial.println(getMacAddress());
////// .        }
////// .        
////// .        void loop()
////// .        {
////// .        
////// .            e2promInitiate();
////// .            e2promWriteWorks("padlock_addr", "padlock_____0000000000000000002233333333334444444448_____padlock" );
////// .            // Serial.println( "padlock_addr");
////// .            // Serial.println( e2promReadWorks("padlock_addr")   );
////// .            // Serial.println( ">>>    >>> ");
////// .        
////// .            e2promWriteWorks("tenant_xc", "tenant_____00000000223333333333444444444455000001111_____tenant");
////// .            // Serial.println( "tenant_xc");
////// .            // Serial.println( e2promReadWorks("tenant_xc")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            e2promWriteWorks("aes_01_code_addr", "aes_01_____iiiiiiiii00000000000000000022iii444444444_____aes_01" );
////// .            // Serial.println( "aes_01_code_addr");
////// .            // Serial.println( e2promReadWorks("aes_01_code_addr")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            e2promWriteWorks("aes_02_code_addr", "aes_02_____444444444iiiiiiiii00000000000000000022iii8_____aes_02" );
////// .            // Serial.println( "aes_02_code_addr");
////// .            // Serial.println( e2promReadWorks("aes_02_code_addr")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            // e2promWriteWorks("aes_03_code_addr", "aes_03_____444444444iiiiiiiii00000000000000000022iii8_____aes_03" );
////// .            e2promWriteWorks("aes_03_code_addr", "aes_03_____**********_____aes_03" );
////// .            // Serial.println( "aes_03_code_addr");
////// .            // Serial.println( e2promReadWorks("aes_03_code_addr")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            // e2promWriteWorks("locksmith_01_lock_verification", "locksmith_01_lock_verification_00_locksmith_01_lock_verification" );
////// .            // Serial.println( "locksmith_01_lock_verification");
////// .            // Serial.println( e2promReadWorks("locksmith_01_lock_verification")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            // e2promWriteWorks("locksmith_02_lock_verification", "locksmith_02_lock_verification_00_locksmith_02_lock_verification" );
////// .            // Serial.println( "locksmith_02_lock_verification");
////// .            // Serial.println( e2promReadWorks("locksmith_02_lock_verification")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            // e2promWriteWorks("locksmith_03_lock_verification", "locksmith_03_lock_verification_00_locksmith_03_lock_verification" );
////// .            e2promWriteWorks("locksmith_03_lock_verification", "locksmith_03_lock_verification_00_locksmith_03_lock_verification???????" );
////// .            // Serial.println( "locksmith_03_lock_verification");
////// .            // Serial.println( e2promReadWorks("locksmith_03_lock_verification")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            // e2promWriteWorks("placeholder_01", "placeholder_01_____iiiiiiiii00000111444444444_____placeholder_01" );
////// .            e2promWriteWorks("placeholder_01", "placeholder_01_____*******_____placeholder_01" );
////// .            // Serial.println( "placeholder_01");
////// .            // Serial.println( e2promReadWorks("placeholder_01")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .            e2promWriteWorks("placeholder_02", "placeholder_02_____iiiiiiiii00000111444444444_____placeholder_02" );
////// .            // Serial.println( "placeholder_02");
////// .            // Serial.println( e2promReadWorks("placeholder_02")   );
////// .            // Serial.println( ">>>    >>> ");
////// .            
////// .            
////// .        
////// .        
////// .            Serial.println( "   =====   Read   =====    22222" ) ; 
////// .        
////// .            Serial.println( e2promReadWorks("padlock_addr")     );
////// .            Serial.println( e2promReadWorks("tenant_xc")     );
////// .            Serial.println( e2promReadWorks("aes_01_code_addr")     );
////// .            Serial.println( e2promReadWorks("aes_02_code_addr")     );
////// .            Serial.println( e2promReadWorks("aes_03_code_addr")     );
////// .            Serial.println( e2promReadWorks("locksmith_01_lock_verification")     );
////// .            Serial.println( e2promReadWorks("locksmith_02_lock_verification")     );
////// .            Serial.println( e2promReadWorks("locksmith_03_lock_verification")     );
////// .            Serial.println( e2promReadWorks("placeholder_01")     );
////// .            Serial.println( e2promReadWorks("placeholder_02")     );
////// .             
////// .        
////// .            while ( true ) {
////// .        
////// .                message_characteristic->setValue("Message one");
////// .                message_characteristic->notify();
////// .        
////// .                Serial.println("Message one - Sent");
////// .                Serial.println(addx(100, -80));
////// .                delay(1000);
////// .        
////// .                message_characteristic->setValue("Message Two");
////// .                message_characteristic->notify();
////// .                
////// .                Serial.println("Message Two - Sent");
////// .                Serial.println(getMacAddress());
////// .                delay(1000);
////// .            }
////// .        }
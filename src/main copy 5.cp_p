#include "HardwareSerial.h"
#include "BLEDevice.h"
#include "BLEServer.h"
#include "BLEUtils.h"
#include "BLE2902.h"


#include "iostream"    // std::cout
#include "algorithm"    // std::min
using namespace std;


#define SERVICE_UUID        "4fafc102-1fb5-432e-8fcc-c5c2c331914b" // random UUID
#define CHARACTERISTIC_UUID "beb593b3-3e61-4a78-7f5b-e861ba07a826" // random UUID

BLEServer *pServe_r;
BLECharacteristic *pCharacteristic;
bool bleDeviceConnected = false;
bool oldBLEDeviceConnected = false;
std::string rxValue = "";
// std::string txValue = "";
std::string txValue = "sending Data from MCU";

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServe_r) {
      bleDeviceConnected = true;
    };

    void onDisconnect(BLEServer* pServe_r) {
      bleDeviceConnected = false;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string value = pCharacteristic->getValue();
      if (value.length() > 0) {
        rxValue = value;
        Serial.println("Received Value: ");
        Serial.println(rxValue.c_str());
      }
    }
};

void setup() {
  Serial.begin(115200);

  BLEDevice::init("KryptonArc_BLE");
  pServe_r = BLEDevice::createServer();
  pServe_r->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServe_r->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_NOTIFY |
                                         BLECharacteristic::PROPERTY_WRITE |
                                         BLECharacteristic::PROPERTY_READ |
                                         BLECharacteristic::PROPERTY_INDICATE
                                       );

  pCharacteristic->addDescriptor(new BLE2902());
  pCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();

  BLEAdvertising *pAdvertising = pServe_r->getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter
  BLEUUID mUUID = BLEUUID::fromString(SERVICE_UUID);
  pAdvertising->start();
  Serial.println("Waiting for a device to connect...");
}

void loop() {
  if (bleDeviceConnected) {
    String msg = "81828384858687888980___81828384858687888980___81828384858687888980";
    int msgLength = msg.length();
    Serial.print("msgLength ::: ");
    Serial.println( msgLength );

    int chunkSize = 18; //max packet size
    for (int i = 0; i < msgLength; i += chunkSize) {
      String chunk = msg.substring(i, min(i + chunkSize, msgLength)); //get next chunk
      Serial.print("chunk ::: ");
      Serial.println( chunk + "_+_+_+_+_" );
      // SerialBT.println(chunk); //send chunk to Bluetooth
    }
    
    if (txValue.length() > 0) {
      pCharacteristic->setValue(txValue);
      pCharacteristic->notify();
      Serial.println("Sent Value: ");
      Serial.println(txValue.c_str());
      delay(1000);
      // txValue = "";
    }
  }

  if (bleDeviceConnected != oldBLEDeviceConnected) {
    oldBLEDeviceConnected = bleDeviceConnected;
    if (!bleDeviceConnected) {
      pServe_r->startAdvertising();
      Serial.println("Waiting for a device to connect...");
    }
  }
  // Serial.println("bleDeviceConnected: ");
  // Serial.println(bleDeviceConnected);
  delay(10);
}

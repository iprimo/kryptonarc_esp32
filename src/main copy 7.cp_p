#include "HardwareSerial.h"
#include "BLEDevice.h"
#include "BLEServer.h"
#include "BLEUtils.h"
#include "BLE2902.h"


#include "iostream"    // std::cout
#include "algorithm"    // std::min
using namespace std;


const int ledPin = 18;


#define SERVICE_UUID        "0002eeff-0000-1000-8000-00805fab94fb" // random UUID
#define CHARACTERISTIC_UUID "5fafc502-0000-1000-8000-00105f9b14fb" // random UUID

BLEServer *pServe_r;
BLECharacteristic *pCharacteristic;
bool bleDeviceConnected = false;
bool oldBLEDeviceConnected = false;
std::string rxValue = "";
String rxValueCache = "";


bool deviceLocked = false;

// std::string txValue = "";
String txValue = "717273747576777879000000000000_11111111111111_222222222___717273747576777879000000000000_11111111111111_222222222___717273747576777879000000000000_11111111111111_222222222";

void incomingStringProcessing(String receivingString ){
    Serial.print("receivingString      >>> ");
    Serial.println(receivingString );

  if ( strcmp( receivingString.c_str() , "set2LOCK2set" ) ){
    deviceLocked = true;
    digitalWrite (ledPin, HIGH);	// turn on the LED
    Serial.print("receivingString      <<<<????");

  } else if ( strcmp( receivingString.c_str() , "set2UNLOCK2set" ) ){
    deviceLocked = false;
    digitalWrite (ledPin, LOW);	// turn off the LED
    Serial.print("set2UNLOCK2set      <<<<????");
  }
  Serial.print("deviceLocked  ::111: ");
  Serial.println(deviceLocked);
  
};




class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServe_r) {
      bleDeviceConnected = true;
    };

    void onDisconnect(BLEServer* pServe_r) {
      bleDeviceConnected = false;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string value = pCharacteristic->getValue();
      if (value.length() > 0) {
        rxValue = value;
        Serial.println("Received Value: ");
        Serial.println(rxValue.c_str());
        if ( strcmp( rxValue.c_str()  , "10_react_native_101" ) ){
          Serial.println("10_react_native_101 : ");
          Serial.println(rxValue.c_str());
          rxValueCache = "";

        } else if ( strcmp( rxValue.c_str()  , "90_react_native_109" ) ){
          Serial.println("90_react_native_109 : ");
          Serial.println( rxValue.c_str());
          Serial.println("rxValueCache &&&&: ");
          Serial.println( rxValueCache );
          incomingStringProcessing( rxValueCache );
          rxValueCache = "";
        } else {
          rxValueCache = rxValueCache + rxValue.c_str();

          Serial.println("rxValueCache $$$$: ");
          Serial.println( rxValueCache );
        }
        
      }
    }
};


void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);

  BLEDevice::init("KryptonArc_BLE");
  pServe_r = BLEDevice::createServer();
  pServe_r->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServe_r->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_NOTIFY |
                                         BLECharacteristic::PROPERTY_WRITE |
                                         BLECharacteristic::PROPERTY_READ |
                                         BLECharacteristic::PROPERTY_INDICATE
                                       );

  pCharacteristic->addDescriptor(new BLE2902());
  pCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();

  BLEAdvertising *pAdvertising = pServe_r->getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter
  BLEUUID mUUID = BLEUUID::fromString(SERVICE_UUID);
  pAdvertising->start();
  Serial.println("Waiting for a device to connect...");
}




void sendingChunkData(String sendingChunk){
    pCharacteristic->setValue(sendingChunk.c_str());
    pCharacteristic->notify();
    Serial.println("Sent Value: ");
    Serial.println(sendingChunk.c_str());
    delay( 10 );
};


void loop() {
  if (bleDeviceConnected) {
    int txValueLength = txValue.length();

    if (txValue.length() > 0) {

      int sendingChunkSize = 20; //max packet size
      // Starting packet
      String starter_block = "100_esp32_000000101";
      sendingChunkData(starter_block);

      // Data packets
      for (int i = 0; i < txValueLength; i += sendingChunkSize) {
        String sendingChunk = txValue.substring(i, min(i + sendingChunkSize, txValueLength)); //get next sendingChunk
        sendingChunkData( sendingChunk );

        // delay between packet transfer
        delay(10);
      }
      // Finishing packet
      String finisher_block = "900_esp32_000000109";
      sendingChunkData(finisher_block);
      txValue = "";
    }
    
  }

  if (bleDeviceConnected != oldBLEDeviceConnected) {
    oldBLEDeviceConnected = bleDeviceConnected;
    if (!bleDeviceConnected) {
      pServe_r->startAdvertising();
      Serial.println("Waiting for a device to connect...");
    }
  }


}

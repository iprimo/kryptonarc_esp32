#include "HardwareSerial.h"
#include "BLEDevice.h"
#include "BLEServer.h"
#include "BLEUtils.h"
#include "BLE2902.h"

#include "iostream"    // std::cout
#include "algorithm"    // std::min
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#include "modules/servo.hpp"
#include "modules/string_works.hpp"
#include "modules/hardware_uuid.h"


using namespace std;

const int ledPin = 17;

#define SERVICE_UUID        "4fafc102-1fb5-432e-8fcc-c5c2c331914b" // random UUID
#define CHARACTERISTIC_UUID "beb593b3-3e61-4a78-7f5b-e861ba07a826" // random UUID

BLEServer *pServe_r;
BLECharacteristic *pCharacteristic;
bool deviceConnected = false;
bool oldDeviceConnected = false;
std::string rxValue = "";
String rxValueCache = "";

bool deviceLocked = false;

String txValue = "";
DEVICE_GLOBAL_HARDWARE_PARAMETERS_FIXED MCU____ID;

void incomingStringProcessing(String receivingString ){


  if ( receivingString == "-BOAV_90_BOAV-" ) {
    deviceLocked = true;
    // servoWorksClose();
    servoWorksDrive(0, 0);
    digitalWrite (ledPin, HIGH);	// turn on the LED

  } else if ( receivingString ==  "BOAV_0_BOAV" ) {
    deviceLocked = false;
    // servoWorksOpen();
    servoWorksDrive(0, 90);
    digitalWrite (ledPin, LOW);	// turn off the LED
  } else if ( receivingString ==  "TI_GetStatus_TI" ) {

    Serial.println("TI_GetStatus_TI: ");

    if ( deviceLocked ){
      // Output A Value = 90
      txValue = "OAV_90_OAV";
    } else {
      // Output A Value = 0
      txValue = "OAV_0_OAV";
    }
  }
  
};

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServe_r) {
      deviceConnected = true;
    };

    void onDisconnect(BLEServer* pServe_r) {
      deviceConnected = false;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string value = pCharacteristic->getValue();
      if (value.length() > 0) {
        rxValue = value;
        Serial.println("Received Value: ");
        Serial.println(rxValue.c_str());

        String rxValueString = rxValue.c_str();

        if ( rxValueString == "10_react_native_101" ){
          rxValueCache = "";

        } else if ( rxValueString == "90_react_native_109" ){
          incomingStringProcessing( rxValueCache );
          rxValueCache = "";
        } else {
          rxValueCache = rxValueCache + rxValueString;
        }
        
      }
    }
};

void setup() {
  //// Servo works
  servoInitiate();

  //// Bluetooth works
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);

  BLEDevice::init("KryptonArc_BLE");
  pServe_r = BLEDevice::createServer();
  pServe_r->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServe_r->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_NOTIFY |
                                         BLECharacteristic::PROPERTY_WRITE |
                                         BLECharacteristic::PROPERTY_READ |
                                         BLECharacteristic::PROPERTY_INDICATE
                                       );

  pCharacteristic->addDescriptor(new BLE2902());
  pCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();

  BLEAdvertising *pAdvertising = pServe_r->getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter
  BLEUUID mUUID = BLEUUID::fromString(SERVICE_UUID);
  pAdvertising->start();
  Serial.println("Waiting for a device to connect...");
}

void sendingChunkData(String sendingChunk){
    pCharacteristic->setValue(sendingChunk.c_str());
    pCharacteristic->notify();
    // Serial.println("Sent Value: ");
    // Serial.println(sendingChunk.c_str());

    Serial.println("Senting Data: ");
    delay( 10 );
};

void loop() {
  // ////////////////////////////////////////////////////////////////////////////////  Testing Section   >>>
  // char str[] = "The quick brown fox jumps over the lazy dog";
  // char substr1[] = "quick";
  // char substr2[] = "lazy";
  // char* value;

  // value = find_value_between_substringsV1(str, substr1, substr2);
  // if (value != NULL) {
  //   Serial.println("***** ***** ***** ***** ***** : ");
  //   Serial.println("" );

  //   Serial.print("substr1: " );
  //   Serial.print( substr1 );
  //   Serial.println("" );

  //   Serial.print("substr2: " );
  //   Serial.print( substr2 );
  //   Serial.println("" );

  //   Serial.print("value: " );
  //   Serial.print( value );
  //   Serial.println("" );

    
  //   free(value);
  // }

    char str[] = "This is string A1:12345A2 and string B1:67890B2";
    char *broadcastOutputA, *valueB;
    char substringA1[] = "A1:";
    char substringA2[] = "A2";
    char substringB1[] = "B1:";
    char substringB2[] = "B2";


    // find_values_between_substringsV2(str, "A1:", "A2", "B1:", "B2", &broadcastOutputA, &valueB);
    find_values_between_substringsV2(str, substringA1, substringA2, substringB1, substringB2, &broadcastOutputA, &valueB);


    Serial.println("***** ***** ***** ***** ***** : ");
    Serial.println("");
    Serial.print("Value A: ");
    Serial.print(broadcastOutputA);

    Serial.println("");
    Serial.print("Value B: ");
    Serial.print(valueB);

    free(broadcastOutputA);
    free(valueB);


  // ////////////////////////////////////////////////////////////////////////////////  Testing Section   <<<



  // This hardware does not automatically send out data, it has to be instructed to send data by the device connected
  if (deviceConnected) {
    int txValueLength = txValue.length();

    if (txValue.length() > 0) {

      int sendingChunkSize = 20; //max packet size
      // Starting packet
      String starter_block = "100_esp32_000000101";
      sendingChunkData(starter_block);

      // Data packets
      for (int i = 0; i < txValueLength; i += sendingChunkSize) {
        String sendingChunk = txValue.substring(i, min(i + sendingChunkSize, txValueLength)); //get next sendingChunk
        sendingChunkData( sendingChunk );

        // delay between packet transfer
        delay(10);
      }
      // Finishing packet
      String finisher_block = "900_esp32_000000109";
      sendingChunkData(finisher_block);
      txValue = "";
    }
    
  }

  if (deviceConnected != oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
    if (!deviceConnected) {
      pServe_r->startAdvertising();
      Serial.println("Waiting for a device to connect...");
    }
  }
}

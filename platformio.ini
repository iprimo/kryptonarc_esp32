; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[env]
test_framework = googletest
monitor_port = COM6
monitor_speed = 115200

; [env:native]
[env:test_desktop]
platform = native
test_framework = googletest
test_ignore = test_embedded
lib_compat_mode = off
build_flags = -std=c++14
; build_flags = -std=c++11
lib_deps = google/googletest@^1.12.1

; [env:esp32dev]
[env:test_embedded]
platform = espressif32
board = esp32dev
framework = arduino
upload_port = COM6
; board_build.embed_txtfiles =
;   src/private.pem.key
;   src/certificate.pem.crt
;   src/aws-root-ca.pem

; upload_port = /dev/ttyUSB0 // REMOTE upload
; upload_port = /dev/cu.usbserial-0001
; upload_speed = 115200
upload_speed = 921600 

monitor_port = COM6
; monitor_port = /dev/ttyUSB0 // REMOTE upload
; monitor_port = /dev/cu.usbserial-0001
monitor_speed = 115200
test_framework = googletest
test_ignore = test_desktop



board_build.partitions = huge_app.csv

; ; 16 MB ESP32
; ; https://community.platformio.org/t/cant-get-esp32-to-use-more-than-4mb/31495/9
; board_upload.flash_size = 16MB
; ; built-in avaiable thanks to https://github.com/espressif/arduino-esp32/blob/master/tools/partitions/default_16MB.csv
; board_build.partitions = default_16MB.csv


; ; board_build.f_flash = 40000000L
; ; THESE LINES MAKE LINKING MUCH FASTER
; build_flags =-O2
; ; THESE LINES MAKE LINKING MUCH FASTER

; build_flags = 
; 	-D ARDUINO_USB_MODE=1
; 	-D ARDUINO_USB_CDC_ON_BOOT=1

lib_deps = 
	Crypto
	ESP32
	BLE 
	Arduino
	EEPROM
	ESP32Servo									; ESP32Servo: This library allows you to control servo motors using the ESP32 microcontroller.
	ArduinoJson									; ArduinoJson: This library allows you to parse and generate JSON data in your ESP32 project.
	esp32FOTA									; esp32FOTA: This library enables over-the-air (OTA) updates for ESP32 devices. It allows the user to upload new firmware to the ESP32 without requiring a physical connection.
	HTTPClient									; HTTPClient: This library allows you to make HTTP requests from your ESP32 to web servers or APIs.
	marian-craciunescu/ESP32Ping @ ^1.7			; marian-craciunescu/ESP32Ping: This library allows you to check the connectivity of an IP address using the Ping protocol.
	WiFiClientSecure							; WiFiClientSecure: This library allows your ESP32 to connect to a WiFi network using WPA2 encryption for secure communication.
	WiFi										; WiFi: This library provides functions to connect and manage WiFi networks on the ESP32.
	SPI										; SPI: This library provides functions for using the Serial Peripheral Interface (SPI) protocol for communication with other devices.
	FS										; FS: This library provides functions for accessing and manipulating files on the ESP32's flash memory or an SD card.
	Update										; Update: This library provides functions for updating the firmware on the ESP32.
	mbedtls										; mbedtls: This is a lightweight cryptographic library that provides functions for SSL/TLS encryption and digital signatures, which can be used for secure communication over the internet.
	SHA512
	base64
	Base64
	NTPClient
	google/googletest@^1.12.1
	ArduinoECCX08
	Wire



